import streamlit as st
import boto3
import pandas as pd
from datetime import date, timedelta



def render_leave_request_page():
    st.title("üìÑ Qu·∫£n l√Ω y√™u c·∫ßu ngh·ªâ ph√©p")

    # Ki·ªÉm tra ƒëƒÉng nh·∫≠p
    if not st.session_state.get("logged_in", False):
        st.warning(
            "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p trong trang **T√†i kho·∫£n nh√¢n vi√™n** ƒë·ªÉ xem th√¥ng tin ngh·ªâ ph√©p."
        )
        st.stop()

    emp_id = st.session_state["employeeID"]
    today = date.today()

    # K·∫øt n·ªëi DynamoDB
    ddb = boto3.resource("dynamodb", region_name="us-east-1")
    table_request = ddb.Table("leave_request")
    table_emp = ddb.Table("employee_info")

    # Qu√©t leave_request
    try:
        response = table_request.scan()
        items = response.get("Items", [])
    except Exception as e:
        st.error(f"L·ªói khi ƒë·ªçc d·ªØ li·ªáu t·ª´ DynamoDB: {e}")
        return

    if not items:
        st.info("Hi·ªán ch∆∞a c√≥ d·ªØ li·ªáu y√™u c·∫ßu ngh·ªâ ph√©p.")
        return

    df = pd.DataFrame(items)

    # ƒê·∫£m b·∫£o c·ªôt t·ªìn t·∫°i
    expected_columns = [
        "requestID",
        "employeeID",
        "ngay_bat_dau_nghi",
        "ngay_ket_thuc_nghi",
        "so_ngay_nghi",
        "loai_nghi",
        "li_do_xin_nghi",
        "trang_thai",
        "ghi_chu",
        "approverID1",
        "approverID2",
    ]
    for col in expected_columns:
        if col not in df.columns:
            df[col] = ""

    # T·∫°o mapping employeeID -> t√™n
    try:
        emp_resp = table_emp.scan()
        emp_items = emp_resp.get("Items", [])
        employee_map = {
            e["employeeID"]: e.get("emp_name", e["employeeID"]) for e in emp_items
        }
    except Exception as e:
        employee_map = {}
        st.warning("Kh√¥ng l·∫•y ƒë∆∞·ª£c t√™n nh√¢n vi√™n, s·∫Ω hi·ªÉn th·ªã m√£ nh√¢n vi√™n.")

    # Parse ng√†y v√† s·ªë ng√†y ngh·ªâ
    df["ngay_bat_dau_nghi_parsed"] = pd.to_datetime(
        df["ngay_bat_dau_nghi"], format="%Y-%m-%d", errors="coerce"
    )
    df["so_ngay_nghi_int"] = pd.to_numeric(df["so_ngay_nghi"], errors="coerce").fillna(
        1
    )

    # ========= PH·∫¶N 1: Y√™u c·∫ßu c·ªßa b·∫£n th√¢n =========
    st.header("üìù Y√™u c·∫ßu ngh·ªâ ph√©p c·ªßa b·∫°n")

    df_self = df[
        (df["employeeID"] == emp_id) & (df["ngay_bat_dau_nghi_parsed"].dt.date >= today)
    ]

    if not df_self.empty:
        df_self_display = df_self.copy()
        df_self_display["T√™n nh√¢n vi√™n"] = df_self_display["employeeID"].apply(
            lambda x: employee_map.get(x, x)
        )
        df_self_display = df_self_display.rename(
            columns={
                "requestID": "ID y√™u c·∫ßu",
                "ngay_bat_dau_nghi": "Ng√†y b·∫Øt ƒë·∫ßu",
                "so_ngay_nghi": "S·ªë ng√†y ngh·ªâ",
                "li_do_xin_nghi": "L√Ω do ngh·ªâ",
                "trang_thai": "Tr·∫°ng th√°i",
                "ghi_chu": "Ghi ch√∫",
            }
        )
        st.dataframe(
            df_self_display[
                [
                    "ID y√™u c·∫ßu",
                    "T√™n nh√¢n vi√™n",
                    "Ng√†y b·∫Øt ƒë·∫ßu",
                    "S·ªë ng√†y ngh·ªâ",
                    "L√Ω do ngh·ªâ",
                    "Tr·∫°ng th√°i",
                    "Ghi ch√∫",
                ]
            ].sort_values(by="Ng√†y b·∫Øt ƒë·∫ßu", ascending=True)
        )
    else:
        st.info("B·∫°n ch∆∞a c√≥ y√™u c·∫ßu ngh·ªâ ph√©p n√†o.")

    # ========= PH·∫¶N 2: Y√™u c·∫ßu c·∫ßn duy·ªát =========
    st.header("‚úÖ Y√™u c·∫ßu c·∫ßn b·∫°n duy·ªát")

    # T√≠nh deadline hi·ªÉn th·ªã
    def compute_deadline(row):
        if pd.isna(row["ngay_bat_dau_nghi_parsed"]):
            return pd.NaT
        if row["so_ngay_nghi_int"] <= 7:
            return row["ngay_bat_dau_nghi_parsed"].date() - timedelta(days=1)
        else:
            return row["ngay_bat_dau_nghi_parsed"].date() - timedelta(days=3)

    df["deadline_duyet"] = df.apply(compute_deadline, axis=1)

    df_approve = df[
        ((df["approverID1"] == emp_id) | (df["approverID2"] == emp_id))
        & (df["deadline_duyet"] >= today)
    ]

    if df_approve.empty:
        st.info("Kh√¥ng c√≥ y√™u c·∫ßu n√†o c·∫ßn b·∫°n duy·ªát.")
        return

    # Hi·ªÉn th·ªã t·ª´ng y√™u c·∫ßu d∆∞·ªõi d·∫°ng form
    for idx, row in df_approve.iterrows():
        with st.container():
            ten_nhan_vien = employee_map.get(row["employeeID"], row["employeeID"])
            st.markdown(
                f"### üìù ƒê∆°n ngh·ªâ #{row['requestID']} - Nh√¢n vi√™n {ten_nhan_vien}"
            )
            col1, col2 = st.columns(2)
            with col1:
                st.text_input("Ng√†y b·∫Øt ƒë·∫ßu", row["ngay_bat_dau_nghi"], disabled=True)
                st.text_input("S·ªë ng√†y ngh·ªâ", str(row["so_ngay_nghi"]), disabled=True)
            with col2:
                st.text_input("Lo·∫°i ngh·ªâ", row.get("loai_nghi", ""), disabled=True)
                st.text_input(
                    "Tr·∫°ng th√°i hi·ªán t·∫°i", row.get("trang_thai", ""), disabled=True
                )
            st.text_area("L√Ω do ngh·ªâ", row.get("li_do_xin_nghi", ""), disabled=True)
            st.text_area("Ghi ch√∫", row.get("ghi_chu", ""), disabled=True)

            # Quy·∫øt ƒë·ªãnh ph√™ duy·ªát
            action = st.radio(
                f"Ch·ªçn h√†nh ƒë·ªông cho y√™u c·∫ßu #{row['requestID']}",
                ["Gi·ªØ nguy√™n", "Ph√™ duy·ªát", "T·ª´ ch·ªëi"],
                key=f"action_{row['requestID']}",
            )
            reject_reason = ""
            if action == "T·ª´ ch·ªëi":
                reject_reason = st.text_area(
                    "L√Ω do t·ª´ ch·ªëi (b·∫Øt bu·ªôc)", key=f"reason_{row['requestID']}"
                )

            if st.button("X√°c nh·∫≠n", key=f"confirm_{row['requestID']}"):
                if action == "T·ª´ ch·ªëi" and not reject_reason.strip():
                    st.error("Vui l√≤ng nh·∫≠p l√Ω do t·ª´ ch·ªëi!")
                    st.stop()
                if action == "Gi·ªØ nguy√™n":
                    st.info("B·∫°n ch∆∞a ch·ªçn ph√™ duy·ªát ho·∫∑c t·ª´ ch·ªëi.")
                    st.stop()

                # C·∫≠p nh·∫≠t DynamoDB
                new_status = "ƒê√£ duy·ªát" if action == "Ph√™ duy·ªát" else "ƒê√£ t·ª´ ch·ªëi"
                try:
                    table_request.update_item(
                        Key={
                            "employeeID": row["employeeID"],
                            "requestID": row["requestID"],
                        },
                        UpdateExpression="SET trang_thai = :s, ghi_chu = :g",
                        ExpressionAttributeValues={
                            ":s": new_status,
                            ":g": reject_reason if action == "T·ª´ ch·ªëi" else "",
                        },
                    )

                    st.success(f"ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh '{new_status}'.")
                    st.rerun()
                except Exception as e:
                    st.error(f"L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i: {e}")
